import os
import logging
from typing import Any, Dict
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, Router, html
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

load_dotenv()

logging.basicConfig(level=logging.INFO)
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å–ª—É–≥
SERVICES = {
    "neuro_diagnostic": "–ù–µ–π—Ä–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - 5000 —Ä—É–±.",
    "neuro_psychologist": "–ó–∞–Ω—è—Ç–∏—è —Å –Ω–µ–π—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º - 4000 —Ä—É–±./—Å–µ—Å—Å–∏—è",
    "sensory_integration": "–°–µ–Ω—Å–æ—Ä–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è - 4500 —Ä—É–±.",
    "speech_diagnostic": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ—á–µ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è - 3000 —Ä—É–±.",
    "logopedist": "–ó–∞–Ω—è—Ç–∏—è —Å –ª–æ–≥–æ–ø–µ–¥–æ–º - 3500 —Ä—É–±./—Å–µ—Å—Å–∏—è",
    "child_psychologist": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–µ—Ç—Å–∫–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ - 4000 —Ä—É–±.",
    "wechsler_test": "–¢–µ—Å—Ç –í–µ–∫—Å–ª–µ—Ä–∞ - 6000 —Ä—É–±.",
    "floortime": "–§–ª–æ—Ä—Ç–∞–π–º - 4500 —Ä—É–±./—Å–µ—Å—Å–∏—è"
}

BRANCHES = [
    "–ù–∞—Ö–∏–º–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç –≥.–ú–æ—Å–∫–≤–∞",
    "–û—Ç—Ä–∞–¥–Ω–æ–µ –≥.–ú–æ—Å–∫–≤–∞",
    "–ú–æ–ª–æ–¥–µ–∂–Ω–∞—è –≥.–ú–æ—Å–∫–≤–∞",
    "–û–Ω–ª–∞–π–Ω –∑–∞–Ω—è—Ç–∏—è"
]

class Form(StatesGroup):
    name = State()
    service = State()
    age = State()
    branch = State()

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    buttons = [
        [InlineKeyboardButton(text="–û –¶–ï–ù–¢–†–ï", callback_data="about")],
        [InlineKeyboardButton(text="–£–°–õ–£–ì–ò –ò –¶–ï–ù–´", callback_data="services")],
        [InlineKeyboardButton(text="–û–ù–õ–ê–ô–ù –†–ê–ó–í–ò–¢–ò–ï", callback_data="online")],
        [InlineKeyboardButton(text="–ó–ê–ü–ò–°–ê–¢–¨–°–Ø", callback_data="appointment")],
        [InlineKeyboardButton(text="–ü–û–õ–ï–ó–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø", callback_data="info")],
        [InlineKeyboardButton(text="–ö–û–ù–¢–ê–ö–¢–´", callback_data="contacts")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Å–ª—É–≥
def services_keyboard():
    builder = InlineKeyboardBuilder()
    for key, value in SERVICES.items():
        builder.button(text=value.split(" - ", 1)[0], callback_data=f"service_{key}")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_menu")
    builder.adjust(1)
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤
def branches_keyboard():
    builder = InlineKeyboardBuilder()
    for branch in BRANCHES:
        builder.button(text=branch, callback_data=f"branch_{BRANCHES.index(branch)}")
    builder.adjust(1)
    return builder.as_markup()

@router.message(CommandStart())
async def cmd_start(message: Message):
    guide = FSInputFile("guide.pdf")  # –ü–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É —Å –±–æ—Ç–æ–º
    await message.answer_document(guide)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¶–µ–Ω—Ç—Ä–∞ –¥–µ—Ç—Å–∫–æ–π –Ω–µ–π—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ ¬´–ê–ª—å—Ç–µ—Ä–∞ –í–∏—Ç–∞¬ª. –í –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏...",
        reply_markup=main_menu_keyboard()
    )

@router.callback_query(F.data == "back_menu")
async def back_to_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )

@router.callback_query(F.data == "about")
async def about_center(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ú—ã - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä –¥–µ—Ç—Å–∫–æ–π –Ω–µ–π—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã...",
        reply_markup=main_menu_keyboard()
    )

@router.callback_query(F.data == "services")
async def show_services(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=services_keyboard()
    )

@router.callback_query(F.data.startswith("service_"))
async def service_detail(callback: CallbackQuery, state: FSMContext):
    service_key = callback.data.split("_", 1)[1]
    service_text = SERVICES[service_key]
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"appoint_{service_key}")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="services")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"{service_text}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏...",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "online")
async def online_development(callback: CallbackQuery, state: FSMContext):
    await state.update_data(branch="–û–Ω–ª–∞–π–Ω –∑–∞–Ω—è—Ç–∏—è")
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω", callback_data="appoint_online")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_menu")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–û–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏—è —Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ —Ü–µ–Ω—Ç—Ä–∞ —á–µ—Ä–µ–∑ Zoom/Skype...",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("appoint"))
async def start_appointment(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split("_", 1)[1]
    await state.update_data(service=data if data != "online" else "–û–Ω–ª–∞–π–Ω-—Ä–∞–∑–≤–∏—Ç–∏–µ")
    await state.set_state(Form.name)
    await callback.message.edit_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

@router.message(Form.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.age)
    await message.answer("–°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ä–µ–±–µ–Ω–∫—É?")

@router.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(Form.branch)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", reply_markup=branches_keyboard())

@router.callback_query(Form.branch, F.data.startswith("branch_"))
async def process_branch(callback: CallbackQuery, state: FSMContext):
    branch_index = int(callback.data.split("_", 1)[1])
    await state.update_data(branch=BRANCHES[branch_index])
    await complete_appointment(callback, state)

async def complete_appointment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ CRM: {data}")
    
    await callback.message.edit_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É, {data['name']}!\n"
        f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n\n"
        f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n"
        f"–£—Å–ª—É–≥–∞: {SERVICES[data['service']]}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞: {data['age']}\n"
        f"–§–∏–ª–∏–∞–ª: {data['branch']}",
        reply_markup=main_menu_keyboard()
    )
    await state.clear()

@router.callback_query(F.data == "info")
async def useful_info(callback: CallbackQuery):
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–æ–≤
    checklists = ["checklist1.pdf", "checklist2.pdf", "checklist3.pdf", "checklist4.pdf", "checklist5.pdf"]
    
    for checklist in checklists:
        await callback.message.answer_document(FSInputFile(checklist))
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu_keyboard()
    )

@router.callback_query(F.data == "contacts")
async def contacts(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67\n"
        "Email: info@altera-vita.ru\n"
        "Website: https://altera-vita.ru",
        reply_markup=main_menu_keyboard()
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())